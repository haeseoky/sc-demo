import groovy.json.JsonBuilder
import org.w3c.dom.Document
import org.w3c.dom.Element

import javax.xml.parsers.DocumentBuilderFactory

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.ocean'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
//    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.3'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-starter-webmvc-ui
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // https://mvnrepository.com/artifact/io.github.resilience4j/resilience4j-circuitbreaker
    implementation 'io.github.resilience4j:resilience4j-circuitbreaker:2.2.0'

    // https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'

    // https://mvnrepository.com/artifact/co.elastic.clients/elasticsearch-java
    implementation 'co.elastic.clients:elasticsearch-java:8.15.4'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.0'

    // https://mvnrepository.com/artifact/org.springframework.data/spring-data-redis
//    implementation 'org.springframework.data:spring-data-redis:3.3.4'
//    implementation 'org.mariadb:r2dbc-mariadb:1.3.0'

    // Caffeine Cache (로컬 캐시)
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
    implementation 'org.springframework.boot:spring-boot-starter-cache'

    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
}

tasks.named('test') {
    useJUnitPlatform()
    maxHeapSize = "2g"
    jvmArgs = [
        "-Xmx2g",
        "-Xms512m",
        "-XX:MaxMetaspaceSize=512m",
        "-XX:+UseG1GC"
    ]
//    reports {
//        junitXml.outputPerTestCase = true
//    }
//    finalizedBy('convertXmlToJson')
}


tasks.register('convertXmlToJson') {
    description = 'Converts JUnit XML test reports to JSON format'

    doLast {
        def xmlReportsDir = file("${rootDir}/build/test-results/test")
        def jsonReportFile = file("./test-results.json")

        if (!xmlReportsDir.exists()) {
            println "No XML test reports found to convert."
            return
        }

        if (jsonReportFile.exists()) {
            jsonReportFile.delete()
            println "Deleted existing JSON test report file: ${jsonReportFile}"
        }

        def jsonOutput = new JsonBuilder()

        // Track summary data
        def testCount = 0
        def skippedCount = 0
        def failedCount = 0
        def totalTime = 0.0

        // Use Java's DocumentBuilderFactory to parse XML files
        def factory = DocumentBuilderFactory.newInstance()
        def builder = factory.newDocumentBuilder()
        def tests = []

        xmlReportsDir.eachFileRecurse { File file ->
            if (file.name.endsWith('.xml')) {
                Document document = builder.parse(file)
                Element testSuite = document.documentElement

                def testCaseNodes = testSuite.getElementsByTagName("testcase")
                for (int i = 0; i < testCaseNodes.getLength(); i++) {
                    def testCase = testCaseNodes.item(i)

                    def result = [:]
                    result.name = testCase.getAttribute("name")
                    result.className = testCase.getAttribute("classname")
                    result.time = testCase.getAttribute("time").toDouble()

                    testCount++  // Increment the total test count
                    totalTime += result.time  // Accumulate total time

                    def failureNodes = testCase.getElementsByTagName("failure")
                    if (failureNodes.getLength() > 0) {
                        result.status = 'FAILED'
                        result.message = failureNodes.item(0).getAttribute("message")
                        failedCount++  // Increment the failed test count
                    } else if (testCase.getElementsByTagName("skipped").getLength() > 0) {
                        result.status = 'SKIPPED'
                        skippedCount++  // Increment the skipped test count
                    } else {
                        result.status = 'SUCCESS'
                    }

                    tests << result
                }
            }
        }

        // Add summary to the JSON output
        def summary = [
                tests: testCount,
                skipped: skippedCount,
                failures: failedCount,
                "total time": totalTime
        ]

        jsonOutput([
                summary: summary,
                tests: tests
        ])

        // Write JSON result to file
        jsonReportFile.text = jsonOutput.toPrettyString()
        println "JSON test report generated: ${jsonReportFile}"
    }
}
